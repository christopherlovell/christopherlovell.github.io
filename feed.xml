<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://christopherlovell.co.uk/feed.xml" rel="self" type="application/atom+xml"/><link href="https://christopherlovell.co.uk/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-01-22T10:47:10+00:00</updated><id>https://christopherlovell.co.uk/feed.xml</id><title type="html">blank</title><subtitle>Computational Astrophysicist </subtitle><entry><title type="html">An introduction to creating Python documentation using Sphinx</title><link href="https://christopherlovell.co.uk/blog/2019/10/30/sphinx-documentation.html" rel="alternate" type="text/html" title="An introduction to creating Python documentation using Sphinx"/><published>2019-10-30T00:00:00+00:00</published><updated>2019-10-30T00:00:00+00:00</updated><id>https://christopherlovell.co.uk/blog/2019/10/30/sphinx-documentation</id><content type="html" xml:base="https://christopherlovell.co.uk/blog/2019/10/30/sphinx-documentation.html"><![CDATA[<p>Documentation: a god-send when it exists, but always bottom of the priority list when creating your own projects. Fortunately, Sphinx is here to make it (a bit) easier to document Python projects. Here’s a quick, bare-bones run down of how to do it, and host it on <a href="https://readthedocs.org/">readthedocs</a>.</p> <h2 id="installation">Installation</h2> <p>I think the easiest way is to just use pip</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install -U sphinx
</code></pre></div></div> <p>This way it’s packaged with your environment, and you can easily update or remove it as needed. The downside is you will have a separate install for each environment, so if disk space is a concern this isn’t the best approach, and you might want to choose another option <a href="http://www.sphinx-doc.org/en/master/usage/installation.html">here</a>.</p> <h2 id="quickstart">Quickstart</h2> <p>Navigate to your project directory, and create a <code class="language-plaintext highlighter-rouge">docs</code> folder.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir docs
cd docs
</code></pre></div></div> <p>Then you can run <code class="language-plaintext highlighter-rouge">sphinx-quickstart</code> in this directory.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sphinx-quickstart
</code></pre></div></div> <p>This will ask you a few questions, which you can answer yes to the defaults to in most cases. I like to separate the source and build directories to make managing the documentation with git easier.</p> <h2 id="build-the-docs">Build the docs</h2> <p>It’s as simple as running <code class="language-plaintext highlighter-rouge">make</code> with the format desired in the <code class="language-plaintext highlighter-rouge">docs</code> directory. For example, for html:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make html
</code></pre></div></div> <h2 id="push-to-github">Push to github</h2> <p>Your project is all up to date in source control, right? Good. (If not, go sort that out now).</p> <p>Commit and push your new docs. You can ignore the <code class="language-plaintext highlighter-rouge">build</code> folder and just add the make files and contents of the <code class="language-plaintext highlighter-rouge">source</code> folder.</p> <h2 id="deploy-to-read-the-docs">Deploy to Read the docs</h2> <p>If you upload your code as-is to <em>readthedocs</em> your build will initially fail. This is because <em>readthedocs</em> by default assumes that the default master document is <code class="language-plaintext highlighter-rouge">conf.rst</code>, not <code class="language-plaintext highlighter-rouge">index.rst</code>. To fix it, just add this line anywhere within <code class="language-plaintext highlighter-rouge">source/conf.py</code> (I stuck mine at the bottom with a ‘custom features’ comment).</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>master_doc = 'index'
</code></pre></div></div> <p>Then go to <a href="https://readthedocs.org">readthedocs.org</a>, sign up, and search for your repository. You should then be able to just follow the instricutions and build your beautiful documentation.</p>]]></content><author><name></name></author><category term="Technology"/><summary type="html"><![CDATA[An introduction to creating Python documentation using Sphinx]]></summary></entry><entry><title type="html">D3 Mondrian Generator</title><link href="https://christopherlovell.co.uk/blog/2017/09/03/mondrian-generator.html" rel="alternate" type="text/html" title="D3 Mondrian Generator"/><published>2017-09-03T00:00:00+00:00</published><updated>2017-09-03T00:00:00+00:00</updated><id>https://christopherlovell.co.uk/blog/2017/09/03/mondrian-generator</id><content type="html" xml:base="https://christopherlovell.co.uk/blog/2017/09/03/mondrian-generator.html"><![CDATA[<p>Weekend project: use D3 to generate artwork inspired by <a href="https://en.wikipedia.org/wiki/Piet_Mondrian">Piet Mondrian</a> (see some examples <a href="https://www.google.com/search?q=mondrian&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=0ahUKEwi_tYHAl4rWAhWs5YMKHbjGAEoQ_AUICigB&amp;biw=1454&amp;bih=733">here</a>). A gist of the code is available at the bottom of the page; to run locally, start up a python http server in the script directory:</p> <p><code class="language-plaintext highlighter-rouge">python -m SimpleHTTPServer</code></p> <p>Some ideas for future improvements:</p> <ul> <li>Choose colour scheme from a drop down list</li> <li>Choose the recursion level</li> <li>Resize the box dynamically</li> <li>Animate on refresh</li> <li>Sliders for colour ratios</li> </ul> <p>Hit the <em>update</em> button to refresh!</p> <div id="option"> <input name="updateButton" type="button" value="Update" onclick="update()"/> </div> <p><br/></p> <div id="mondrian" style="display: table; margin: 0 auto"> <script src="https://d3js.org/d3.v4.js" charset="utf-8"></script> <script>function update(){for(var t=[{x:0,y:0,width:w,height:h}],r=0;r<recurs;){r++,n=t.length,to_remove=[];for(var o=0;o<n;o++)if(t[o].width>tol&&t[o].height>tol){to_remove.push(o);var e=fractions[Math.floor(Math.random()*fractions.length)],i=t[o].x,a=t[o].y;if(Math.random()>.5){var l=t[o].width*e,d=t[o].height;t.push({x:i+l,y:a,width:t[o].width-l,height:d})}else{l=t[o].width,d=t[o].height*e;t.push({x:i,y:a+d,width:l,height:t[o].height-d})}t.push({x:i,y:a,width:l,height:d})}for(o=to_remove.length-1;o>=0;o--)t.splice(to_remove[o],1)}for(o=0;o<t.length;o++){var c=Math.random();colourIndex=colour_cum_prob.findIndex(function(t){return t>c}),svg.append("rect").attr("x",t[o].x).attr("y",t[o].y).attr("width",t[o].width).attr("height",t[o].height).attr("fill",colours[colourIndex]).attr("stroke-width",6).attr("stroke","black")}}var w=500,h=500,padding=30,svg=d3.select("#mondrian").append("svg").attr("width",w).attr("height",h).attr("style","outline: thick solid black;"),colours=["red","blue","yellow","white","black"],colour_prob=[.1,.1,.1,.6,.1],colour_cum_prob=[];colour_prob.reduce(function(t,r,o){return colour_cum_prob[o]=t+r},0);var fractions=[.2,.4,.6,.8],tol=80,recurs=7;update();</script> </div> <p><br/> <script src="https://gist.github.com/christopherlovell/9d532ce94c48c6ff4b9f97ef323e3c6a.js"></script></p>]]></content><author><name></name></author><category term="Technology"/><summary type="html"><![CDATA[Generating Mondrian-esque art with D3]]></summary></entry><entry><title type="html">Accessing Jupyter over SSH</title><link href="https://christopherlovell.co.uk/blog/2017/03/04/ssh-jupyter.html" rel="alternate" type="text/html" title="Accessing Jupyter over SSH"/><published>2017-03-04T00:00:00+00:00</published><updated>2017-03-04T00:00:00+00:00</updated><id>https://christopherlovell.co.uk/blog/2017/03/04/ssh-jupyter</id><content type="html" xml:base="https://christopherlovell.co.uk/blog/2017/03/04/ssh-jupyter.html"><![CDATA[<p>If you spend a lot of time on a remote machine and want the flexibility and interactivity of Jupyter notebooks, here’s a short guide on how to access notebooks on the remote from your local browser.</p> <p>You first need to start Jupyter on the server. Log in, navigate to the directory you want to serve, then start the server:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash">remote-user@remote-host<span class="nv">$ </span>jupyter notebook <span class="nt">--no-browser</span> <span class="nt">--port</span><span class="o">=</span>8888</code></pre></figure> <p>The <code class="language-plaintext highlighter-rouge">--no-browser</code> flag stops it launching a browser instance from the server. The port number should also be free - if the port is busy, or being used by someone else, Jupyter will throw a warning and try a different port automatically. Make sure you take note of the exact port Jupyter eventually uses.</p> <p>We can now try to access the Jupyter instance from our local machine. Open a terminal and start an SSH tunnel:</p> <figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ssh <span class="nt">-i</span> ~/.ssh/id_rsa.pub <span class="nt">-NL</span> 8157:localhost:8888 remote-user@remote-host</code></pre></figure> <p>The <code class="language-plaintext highlighter-rouge">N</code> flag prevents a shell prompt coming up (ideal for port forwarding). You can also request that the command goes to background with the <code class="language-plaintext highlighter-rouge">-f</code> flag, so you can still use the terminal afterwards. The <code class="language-plaintext highlighter-rouge">-L</code> flag list the port forwarding configuration. Here, <code class="language-plaintext highlighter-rouge">8157</code> is the local port, and <code class="language-plaintext highlighter-rouge">localhost:8888</code> is the port used on the remote (the one we specified earlier). Finally, you need the username and address of the machine you’re trying to access (<code class="language-plaintext highlighter-rouge">remote-user@remote-host</code>). If you have credentials saved locally, you can access these by pointing to your identity file with the <code class="language-plaintext highlighter-rouge">-i</code> flag.</p> <p>You can now got to your local browser and navigate to <code class="language-plaintext highlighter-rouge">localhost:8157</code>, and Jupyter on the remote host should load.</p> <p>You’ve made it! Now go crunch some data.</p>]]></content><author><name></name></author><category term="Technology"/><summary type="html"><![CDATA[Remotely access Jupyter notebooks through SSH]]></summary></entry><entry><title type="html">Back up your Spotify Playlists</title><link href="https://christopherlovell.co.uk/blog/2016/08/19/spotmybackup.html" rel="alternate" type="text/html" title="Back up your Spotify Playlists"/><published>2016-08-19T00:00:00+00:00</published><updated>2016-08-19T00:00:00+00:00</updated><id>https://christopherlovell.co.uk/blog/2016/08/19/spotmybackup</id><content type="html" xml:base="https://christopherlovell.co.uk/blog/2016/08/19/spotmybackup.html"><![CDATA[<p>Discovered the excellent <a href="https://github.com/bitsofpancake/spotify-backup" target="source">spotify-backup</a> recently, which swipes your entire spotify playlists. Useful if you’re as paranoid as me about Spotify accidentally deleting your painstakingly curated content.</p> <p>You’ll need Python3, after that just clone the repo and run the line below in the directory. It should launch a window in your browser to authenticate with Spotify (if not, there are instructions on the site for manual authentication).</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 spotify-backup.py playlists.json --format=json
</code></pre></div></div> <p>I haven’t found a working scraper for my entire library yet. If anyone is reading this and has seen the light, please let me know in the comments!</p>]]></content><author><name></name></author><category term="Technology"/><summary type="html"><![CDATA[Discovered the excellent spotify-backup recently, which swipes your entire spotify playlists. Useful if you’re as paranoid as me about Spotify accidentally deleting your painstakingly curated content.]]></summary></entry><entry><title type="html">Converting WAV to MP3 in the terminal</title><link href="https://christopherlovell.co.uk/blog/2016/08/16/convert-wav-mp3.html" rel="alternate" type="text/html" title="Converting WAV to MP3 in the terminal"/><published>2016-08-16T00:00:00+00:00</published><updated>2016-08-16T00:00:00+00:00</updated><id>https://christopherlovell.co.uk/blog/2016/08/16/convert-wav-mp3</id><content type="html" xml:base="https://christopherlovell.co.uk/blog/2016/08/16/convert-wav-mp3.html"><![CDATA[<p>Need to convert multiple WAV files to MP3 through the terminal? You need <code class="language-plaintext highlighter-rouge">ffmpeg</code>. Most commonly used for video conversions, <code class="language-plaintext highlighter-rouge">ffmpeg</code> can also be used to convert between audio formats.</p> <p>Here’s how to do a simple conversion from WAV to MP3:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg -i test.wav -acodec mp3 test.mp3
</code></pre></div></div> <p>You can also specify the bitrate of the MP3 with the <code class="language-plaintext highlighter-rouge">-ab</code> flag.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ffmpeg -i test.wav -acodec mp3 -ab 64k test.mp3
</code></pre></div></div>]]></content><author><name></name></author><category term="Technology"/><summary type="html"><![CDATA[Convert WAV to MP3 through the terminal]]></summary></entry><entry><title type="html">Bayes’ Rule, James V. Stone</title><link href="https://christopherlovell.co.uk/blog/2016/07/26/bayes-rule-book.html" rel="alternate" type="text/html" title="Bayes’ Rule, James V. Stone"/><published>2016-07-26T00:00:00+00:00</published><updated>2016-07-26T00:00:00+00:00</updated><id>https://christopherlovell.co.uk/blog/2016/07/26/bayes-rule-book</id><content type="html" xml:base="https://christopherlovell.co.uk/blog/2016/07/26/bayes-rule-book.html"><![CDATA[<blockquote> <p><em>These thoughts are also published on <a href="https://www.goodreads.com/review/show/1690590902?book_show_action=false">Goodreads</a>.</em></p> </blockquote> <p>Just finished a decent little book called Bayes’ Rule, by James V. Stone, which introduces the reverend Bayes’ seminal contribution to probability theory. It’s aimed at the complete novice, a little lower than I was hoping for personally, but useful nonetheless thanks to the plentiful real world examples. It’s a bit short; each chapter is around 10 pages with relatively large font, which makes the content easy to consume, but could have been just as well represented through a series of blog posts. Stone also makes it clear he wants to avoid jargon, but some of his explanations become opaque and obscure without it, and he often forgets his own rule and uses language without introducing it.</p> <p>Would recommend to an undergrad just starting out with Bayesian Analysis, who is perhaps struggling with the conceptual understanding. But get it from a library, as it’s a little brief for the price.</p> <p><br/> <a href="/images/bayes1.jpg" data-lightbox="bilevel-partition" data-title="Bayes' Rule"> <img class="vsmall" src="/images/bayes1.jpg" title="Cover" style="float:left;"/> <img class="vsmall" src="/images/bayes2.jpg" title="Back" style="float:left;"/> </a> <br/></p>]]></content><author><name></name></author><category term="Books"/><summary type="html"><![CDATA[A decent beginner's introduction to Bayes' rule, if a little short]]></summary></entry><entry><title type="html">Astro in Python</title><link href="https://christopherlovell.co.uk/blog/2016/07/24/astro-in-python.html" rel="alternate" type="text/html" title="Astro in Python"/><published>2016-07-24T00:00:00+00:00</published><updated>2016-07-24T00:00:00+00:00</updated><id>https://christopherlovell.co.uk/blog/2016/07/24/astro-in-python</id><content type="html" xml:base="https://christopherlovell.co.uk/blog/2016/07/24/astro-in-python.html"><![CDATA[<p>I recently finished work on a Python course for Astronomy and Astrophysics, sponsored by the <a href="http://www.sepnet.ac.uk/">South East Physics network</a> (SEPnet), called <a href="/astro-python/">Astro in Python</a>. It takes the form of Jupyter notebooks, each one covering a particular topic or Python module, and is intended to be a self-contained, one-stop shop; just download the notebook and associated data and work through the code.</p> <p>The course is aimed at final year undergraduates, graduate students, or anyone who wants an accessible introduction to a particular Python topic in the field. SEPnet were willing to allow the course to be made open source, so take a look and let me know what you think! <a href="https://github.com/christopherlovell/astro-python/blob/master/Notebooks/04.%20Plotting.ipynb">Here’s an example notebook on plotting images</a>.</p> <p>I’m hoping to continue working on this, adding more notebooks on modules that I find useful. I’d also encourage you, if you find the format useful, to contribute your own notebooks, or suggestions, for modules you found useful or on topics you would like to see introductions to.</p> <p>All of the work herein took liberal inspiration from the documentation of the relevant packages, and is in no way intended to replace it. The intention is only to provide a quick and accessible introduction; once up to speed, I encourage everyone to consult the relevant documentation for a more in depth look at how to use a particular package.</p> <p><img src="/images/astro-in-python-demo.png" alt="demo"/></p>]]></content><author><name></name></author><category term="Technology"/><category term="Physics"/><summary type="html"><![CDATA[A one stop shop for introductions to Python modules used in Astronomy and Astrophysics]]></summary></entry><entry><title type="html">Highly Original Monster Catching Game</title><link href="https://christopherlovell.co.uk/blog/2016/07/23/bokemon.html" rel="alternate" type="text/html" title="Highly Original Monster Catching Game"/><published>2016-07-23T00:00:00+00:00</published><updated>2016-07-23T00:00:00+00:00</updated><id>https://christopherlovell.co.uk/blog/2016/07/23/bokemon</id><content type="html" xml:base="https://christopherlovell.co.uk/blog/2016/07/23/bokemon.html"><![CDATA[<p>I have an axe to grind. The recent incredible success of <em>Pokémon Go</em> has left a bitter taste in my mouth, because, essentially, me and a friend came up with the same idea <strong>4 years ago</strong>. Never mind that we lacked the small matter of intellectual property rights to one of the world’s biggest and most loved franchises. We had the idea first. And it’s not fair.</p> <p>What makes <em>Pokémon Go</em> so revolutionary is that it combines the virtual world with the real world, encouraging people to go out and explore their own local environment whilst being part of a parallel online adventure. Dylan Price and I came up with pretty much the <strong>exact same concept</strong> way back in 2012. We planned to use what was the fresh technology of the day, QR codes, but the principal of concurrent exploration was identical. Below is one of our early storyboards, starring your bitter correspondent.</p> <p><img src="/images/bokemon/img1.png" alt="storyboard"/> <img src="/images/bokemon/img2.png" alt="storyboard"/> <img src="/images/bokemon/img3.png" alt="storyboard"/> <img src="/images/bokemon/img4.png" alt="storyboard"/></p> <p>We called it ‘Highly Original Monster Catching Game’ because, well, we wore our inspirations on our sleeves. I started developing the infrastructure in PHP because I was a naive masochist. We even started to design the ‘monsters’ in our game, opting for a scruffy, derpy version of the anime characters from the-franchise-that-shall-not-be-named.</p> <p>Here’s part of a pitch we made to Spark, an enterprise competition run by Cardiff University (who are now, I imagine, weeping in to a bowl of glamorgan sausages, lamenting their lost billions).</p> <blockquote> <p>‘Highly Original Monster Catching Game’ is an interactive art installation based around the concept of recognising the importance of play, exploration and imagination in a demographic that extends beyond children and young adolescents. Too often are we absorbed by the pace of the daily grind that we forget to take a step outside of ‘ordinary life’ and enter a non-serious space where we can free our imaginations, explore the environment or simply become absorbed within a new rule set to no particular end. There exist social stigmas around both art and video games which limit the demographic for those who can enjoy either. The traditional format of both mediums requires time to be set apart to enjoy and focus solely on these activities, causing them to lose priority over more ‘important’ tasks … Although art in the urban context does exist, it is enjoyed for a short moment and does not invite participation on the viewers part. Our aim is to create a form of play that invades our every day lives – an antidote to the serious.</p> </blockquote> <p>We planned to start small, launching in Cardiff, but knew that world domination was inevitable.</p> <blockquote> <p>Our installation of small interactive illustrations of creatures will infect a designated Ward in Cardiff. A QR code allows these images to be collected in a form of treasure hunt - the end goal being to find the entire collection. Your collection is represented on your profile on the ‘Highly Original Monster Catching Game’ website along with statistics about your previous discoveries. These illustrations are frequent enough to be noticed by the more perceptive or lucky, and small enough to encourage individuals to investigate their environment more on a daily basis.</p> </blockquote> <p>Augmented reality was a pipe dream at the time, so rather than animating monsters within an app we planned to print images of the monsters with their stats on a card including the QR code.</p> <blockquote> <p>Our product is a game for all ages, with a simple premise: catching monsters. The ‘monsters’ in our game are pictures, printed on small, A5 posters distributed in different locations around the city. Each poster has a QR-code, as shown to the right, which when scanned with the players mobile phone directs them to a website where they can see which monsters they have collected. The site will also have maps and hints on where to find other monsters.</p> </blockquote> <p>A facebook plugin was in the pipeline. Our ambition knew no bounds.</p> <blockquote> <p>This is the initial base set up of the project, but areas for expansion include linking to Facebook, so that users can share which monsters they have caught and direct their friends to find them. A downloadable cross-platform smartphone application would also allow users to check the monsters they have collected and access social platforms such as Facebook.</p> </blockquote> <p>This was no pie in the sky dream. We had a <em>cost</em> model, albeit this consisted of a couple of vague sentences about ‘server space’.</p> <blockquote> <p>Initial costs would include setting up the website, advertising, and sending out the first round of posters. Server space, website management, and poster distribution will all contribute towards recurring costs; many of the posters may be removed or suffer wear over time, therefore they will have to be replaced regularly.</p> </blockquote> <p>Alas, it was not to be. We didn’t make it very far in the Spark competition, and the project was quietly shelved whilst we returned to the more mundane tasks of finishing our undergraduate degrees. Now our dream lives, and it’s everything we envisioned it could be and more. All I ask is that you think of me and Dylan next time you spend £75 on Pokécoins, and the original, groundbreaking, <em>Highly Original Monster Catching Game</em>.</p>]]></content><author><name></name></author><category term="Technology"/><category term="Miscellany"/><summary type="html"><![CDATA[The striking similarities between Pokemon Go and a bedroom project started 4 years ago]]></summary></entry><entry><title type="html">Taking Py-SPHViewer for a spin</title><link href="https://christopherlovell.co.uk/blog/2016/07/20/py-sphviewer.html" rel="alternate" type="text/html" title="Taking Py-SPHViewer for a spin"/><published>2016-07-20T00:00:00+00:00</published><updated>2016-07-20T00:00:00+00:00</updated><id>https://christopherlovell.co.uk/blog/2016/07/20/py-sphviewer</id><content type="html" xml:base="https://christopherlovell.co.uk/blog/2016/07/20/py-sphviewer.html"><![CDATA[<p>It’s now been 9 months since starting my PhD, and after a lot of introductory reading, required masters modules and code familiarisation I have now started doing my first simulations. I completed an early run a few weeks back and have been doing tests to make sure everything looks as it should. I’ll post in the future about exactly the approach we’re taking, but for now bask in the glory of this spinning visualisation produced with Py-SPHViewer (credit to Alejandro Benitez-Llambay for developing and making publicly available). It shows the dark matter distribution in my simulation at a redshift of 4.68, around a billion years after the big bang.</p> <p><img src="/images/dark_matter_spin.gif" alt="sim"/></p>]]></content><author><name></name></author><category term="Technology"/><category term="Physics"/><summary type="html"><![CDATA[It’s now been 9 months since starting my PhD, and after a lot of introductory reading, required masters modules and code familiarisation I have now started doing my first simulations. I completed an early run a few weeks back and have been doing tests to make sure everything looks as it should. I’ll post in the future about exactly the approach we’re taking, but for now bask in the glory of this spinning visualisation produced with Py-SPHViewer (credit to Alejandro Benitez-Llambay for developing and making publicly available). It shows the dark matter distribution in my simulation at a redshift of 4.68, around a billion years after the big bang.]]></summary></entry><entry><title type="html">Nick Bostrom: Astronomical Waste</title><link href="https://christopherlovell.co.uk/blog/2016/07/07/opportunity-cost-delayed-colonisation.html" rel="alternate" type="text/html" title="Nick Bostrom: Astronomical Waste"/><published>2016-07-07T00:00:00+00:00</published><updated>2016-07-07T00:00:00+00:00</updated><id>https://christopherlovell.co.uk/blog/2016/07/07/opportunity-cost-delayed-colonisation</id><content type="html" xml:base="https://christopherlovell.co.uk/blog/2016/07/07/opportunity-cost-delayed-colonisation.html"><![CDATA[<p>Stumbled across this speculative, I assume slightly tongue-in-cheek, <a href="http://www.nickbostrom.com/astronomical/waste.html">paper</a> from Nick Bostrom, published back in 2003, where he calculates the “opportunity cost of delayed colonisation of the local supercluster”. He calculates that for every second that we postpone being in control of the huge stellar energy sources of our host cluster, then $10^{14}$ potential human lives are lost. And this is the conservative estimate - other research suggests the cost is as high as $10^{29}$ human lives per second!</p> <p>A Utilitarian, who abides the imperative “Maximize expected aggregate utility!”, should therefore focus all their efforts advancing technological development so that we can colonise the supercluster as soon as possible. Not so fast, argues Bostrom; existential risk should be the real focus of the utilitarian’s attentions. If the human race ends up being wiped out, either naturally or by our own hand, the opportunity cost would be essentially infinite.</p> <p>But there are different types of Utilitarian. A Utilitarian who is primarily concerned with those people currently alive over those forecast to exist, what Bostrom calls a ‘person-affecting’ Utilitarian, could ignore the existential risk as it would have a relatively smaller cost on current generations. It’s not a clear division: the ‘person-affecting’ utilitarian would still wish to avoid the death of the current population as this would have an opportuntiy cost proportional to their remaining lifespans. However, the potential for life extending or value enhancing technologies in the short term may present a tempting priority.</p> <p>I picked up on the following statement, “Any civilization advanced enough to colonize the local supercluster would likely also have the ability to establish at least the minimally favorable conditions required for future lives to be worth living.” By minimally favourable conditions, Bostrom is talking about the conditions for which living a human life is worthwhile, or ‘a life worth living’. It made me consider at what stage of ‘colonisation’ would we expect to have achieved this for the entire human population? I don’t think that anyone would argue that we are currently close, given the high proportion of those currently living in poverty, and yet we have been firing a selected few in to space for decades. Should we not be able to establish ‘minimally favourable conditions’ for the entire human population, given that we can support human life in Earth orbit for long durations? And if not, at what stage of colonisation would we expect to achieve this goal? When we settle on the Moon? Mars? Colonise the solar system? A rhetorical question worth consideration.</p>]]></content><author><name></name></author><category term="Technology"/><category term="Physics"/><summary type="html"><![CDATA[Stumbled across this speculative, I assume slightly tongue-in-cheek, paper from Nick Bostrom, published back in 2003, where he calculates the “opportunity cost of delayed colonisation of the local supercluster”. He calculates that for every second that we postpone being in control of the huge stellar energy sources of our host cluster, then $10^{14}$ potential human lives are lost. And this is the conservative estimate - other research suggests the cost is as high as $10^{29}$ human lives per second!]]></summary></entry></feed>